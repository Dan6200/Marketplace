openapi: 3.1.0
info:
  title: Thrift eCommerce API
  description: |
    This is the API for Thrift eCommerce Store.

    An online eCommerce platform that offers a wide 
    range of products including electronics, 
    fashion, furniture, kitchen items, media and more.
  version: 1.0.0
  contact:
    name: The Developer
    email: danielnyong66@gmail.com
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
servers:
  - url: 'https://thrift-production.up.railway.app/{basePath}'
    description: Production server
    variables:
      basePath:
        default: v1
  - url: 'https://thrift-dev.up.railway.app/{basePath}'
    description: Development server
    variables:
      basePath:
        default: v1
paths:
  /auth/register:
    post:
      summary: Register an account
      description: Creates an account for the user and authenticates the new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/paths/~1account/get/responses/200/content/application~1json/schema'
                - type: object
                  required:
                    - password
                  properties:
                    password:
                      type: string
                      format: password
                  example:
                    password: my password
            example:
              first_name: Ebuka
              last_name: Eze
              email: ebukaeze@fake.email.com
              phone: '+2341234567890'
              password: my password
              dob: 2000-4-10
              country: Nigeria
      responses:
        '201':
          description: User Account Created
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1login/post/responses/200/content/application~1json/schema'
        '400':
          description: Invalid User Schema
          $ref: '#/paths/~1media/get/responses/400'
        '409':
          description: User Already Exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
  /auth/login:
    post:
      summary: Logs In User.
      description: |
        Logs in the user with a token if it exists. 
        Else login the user with email or phone identification and creates token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - phone
                - password
              properties:
                email:
                  type: string
                  format: email
                phone:
                  type: string
                password:
                  type: string
                  format: password
            examples:
              Example 1:
                summary: You can login with your phone number
                value:
                  phone: '+2341234567890'
                  password: my password
              Example 2:
                summary: Or you can login with your email address
                value:
                  email: joeschmoe@fake.email.com
                  password: password
      responses:
        '200':
          description: User Logged In
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                description: |
                  unique token string used to authenticate the user
                  expires within 30 minutes.
                example:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMzYiLCJpYXQiOjE2ODYwMzg4MzIsImV4cCI6MTY4NjA0MDYzMn0.j8ep358FU8KRSG7ehPdFypoTua5Cr7dgBQdUks8Dkdc
        '400':
          description: Invalid Login Format
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Invalid Login Credentials
          $ref: '#/paths/~1media/get/responses/401'
        '500':
          description: Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
  /auth/logout:
    get:
      summary: Logs Out User
      security:
        - BearerAuth: []
      responses:
        '204':
          description: User Logged Out
          content:
            application/json:
              schema:
                object: null
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
        '500':
          description: Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
  /account:
    get:
      summary: Gets the account information.
      description: Retrieves account information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User Account Retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  first_name:
                    type: string
                  last_name:
                    type: string
                  email:
                    type: string
                    format: email
                  phone:
                    type: string
                  dob:
                    type: string
                    format: date
                  country:
                    type: string
                example:
                  first_name: Joe
                  last_name: Schmoe
                  email: joeschmoe@fake.email.com
                  phone: '+2341234567890'
                  dob: 2000-4-10
                  country: Nigeria
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: User not found
          $ref: '#/paths/~1media/get/responses/404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                description: Default error response
                properties:
                  message:
                    type: string
    patch:
      summary: Update user
      description: Fully or partially updates the user's information.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              - anyOf:
                  - $ref: '#/paths/~1auth~1register/post/requestBody/content/application~1json/schema'
            examples:
              Example 1:
                summary: |
                  You can update all fields - Except password field
                value:
                  first_name: Ebuka
                  last_name: Eze
                  email: ebukaeze@fake.email.com
                  phone: '+2341234567890'
                  dob: 2000-4-10
                  country: Nigeria
              Example 2:
                summary: Or update at least one field
                value:
                  first_name: Ebuka
      responses:
        '204':
          description: Updated Successfully
        '400':
          description: Update Unsuccessful
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: User not found
          $ref: '#/paths/~1media/get/responses/404'
        '500':
          description: Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
    delete:
      summary: Delete user
      description: Deletes the user's information.
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Deleted Successfully
        '400':
          description: Delete Unsuccessful
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: User not found
          $ref: '#/paths/~1media/get/responses/404'
        '500':
          description: Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
  /account/password:
    put:
      summary: Change password
      description: Verifies and updates the users password.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - new_password
              properties:
                password:
                  type: string
                  format: password
                new_password:
                  type: string
                  format: password
              example:
                password: my password
                new_password: my new password
      responses:
        '204':
          description: User Password Updated
        '400':
          description: Password update unsuccessful
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
        '500':
          description: Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
  /account/customer:
    post:
      summary: Creates a customer account.
      description: |
        Creates a customer account for the user.
      security:
        - BearerAuth: []
      responses:
        '201':
          description: Customer Account Created
        '400':
          description: Customer Account Not Created
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: Customer Account Not Found
          $ref: '#/paths/~1media/get/responses/404'
        '409':
          description: Customer Account Already Exists
          $ref: '#/paths/~1auth~1register/post/responses/409'
        '500':
          description: Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
    delete:
      summary: Deletes Customer Account
      description: Deletes the Customer Account
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Customer Account Deleted
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: Customer Account not found
          $ref: '#/paths/~1media/get/responses/404'
        '500':
          description: Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
  /shipping-info:
    post:
      summary: Creates shipping information
      description: |
        Creates shipping address and information for
        the customer account. Customers can have a 
        maximum of only 5 shipping addresses and information.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipient_first_name
                - recipient_last_name
                - address
                - city
                - state
                - postal_code
                - delivery_contact
                - delivery_instructions
              properties:
                recipient_first_name:
                  type: string
                recipient_last_name:
                  type: string
                address:
                  type: string
                city:
                  type: string
                state:
                  type: string
                postal_code:
                  type: string
                delivery_contact:
                  type: string
                delivery_instructions:
                  type: array
                  items:
                    type: string
              example:
                recipient_first_name: Ebuka
                recipient_last_name: Eze
                address: '53, Thomas Salako Street, Ogba,'
                city: Ikeja
                state: Lagos
                postal_code: '123456'
                country: Nigeria
                delivery_contact: '+234902354252'
                delivery_instructions:
                  - 'Call me before you arrive, I may not be home'
                  - 'If I''m not home, drop it with my neighbour'
                  - 'If my neighbour is not home, drop it at the gate'
      responses:
        '201':
          description: |
            Shipping information added to Customer Account.
          content:
            application/json:
              schema:
                type: object
                properties:
                  shipping_info_id:
                    type: integer
                    format: int32
                description: unique identifier for a shipping info
                example:
                  shipping_info_id: 17
        '400':
          description: |
            Shipping information not added to Customer Account.
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: |
            Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            Customer Account not found
          $ref: '#/paths/~1media/get/responses/404'
        '500':
          description: |
            Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
    get:
      summary: Retrieves all the shipping information
      description: |
        Retrieves all the shipping information for the 
        customer account.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: |
            Retrieved all the shipping information added to a 
            Customer's Account.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1shipping-info~1%7BshippingInfoId%7D/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No shipping information found for the customer
          $ref: '#/paths/~1media/get/responses/404'
        '500':
          description: |
            Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
  '/shipping-info/{shippingInfoId}':
    get:
      summary: Retrieves shipping information.
      description: |
        Retrieves the shipping information with Id - shippingInfoId
        for the customer.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shippingInfoId
          schema:
            type: integer
          required: true
          description: Shipping information Id
      responses:
        '200':
          description: |
            Retrieves the shipping information with Id
            shippingInfoId
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1shipping-info/post/requestBody/content/application~1json/schema'
                  - $ref: '#/paths/~1shipping-info/post/responses/201/content/application~1json/schema'
        '400':
          description: Cannot retrieve shipping information
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No shipping information found for the customer
          $ref: '#/paths/~1media/get/responses/404'
        '500':
          description: Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
    put:
      summary: Replace shipping information.
      description: |
        Replaces the shipping information with Id - shippingInfoId
        for the customer.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shippingInfoId
          schema:
            type: integer
          required: true
          description: Shipping information Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1shipping-info/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: |
            Replaced the shipping information with a new one
            and returns its Id.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1shipping-info/post/responses/201/content/application~1json/schema'
        '400':
          description: Cannot replace shipping information
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No shipping information found for the customer
          $ref: '#/paths/~1media/get/responses/404'
        '500':
          description: Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
    delete:
      summary: Deletes shipping information.
      description: |
        Deletes the shipping information with Id - shippingInfoId
        for the customer.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: shippingInfoId
          schema:
            type: integer
          required: true
          description: Shipping information Id
      responses:
        '200':
          description: |
            Deleted the shipping information with Id
            shippingInfoId and returned it's Id
          content:
            application/json:
              schema:
                $ref: '#/paths/~1shipping-info/post/responses/201/content/application~1json/schema'
        '400':
          description: Failed to delete shipping information
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No shipping information found for the customer
          $ref: '#/paths/~1media/get/responses/404'
        '500':
          description: Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
  /payment-info:
    post:
      summary: Creates payment information
      description: |
        Creates payment address and information for
        the customer account. Customers can have a 
        maximum of only 5 payment addresses and information.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: null
      responses:
        '201':
          description: |
            Payment information added to Customer Account.
          content:
            application/json:
              schema: null
        '400':
          description: Failed to add payment information to Customer Account.
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: Customer Account not found
          $ref: '#/paths/~1media/get/responses/404'
        '500':
          description: Internal Server Error
          $ref: '#/paths/~1account/get/responses/500'
    get:
      summary: Retrieves all the payment information
      description: |
        Retrieves all the payment information for the 
        customer account.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: |
            Retrieved all the payment information added to a 
            Customer's Account.
          content:
            application/json:
              schema: null
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No payment information found for the customer
          $ref: '#/paths/~1media/get/responses/404'
  '/payment-info/{paymentInfoId}':
    get:
      summary: Retrieves payment information.
      description: |
        Retrieves the payment information with Id - paymentInfoId
        for the customer.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: |
            Retrieves the payment information with Id
            paymentInfoId
          content:
            application/json:
              schema: null
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No payment information found for the customer
          $ref: '#/paths/~1media/get/responses/404'
    put:
      summary: Replace payment information.
      description: |
        Replaces the payment information with Id - paymentInfoId
        for the customer.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: |
            Replaced the payment information with a new one
            and returns its Id.
          content:
            application/json:
              schema: null
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No payment information found for the customer
          $ref: '#/paths/~1media/get/responses/404'
    delete:
      summary: Deletes payment information.
      description: |
        Deletes the payment information with Id - paymentInfoId
        for the customer.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: |
            Deleted the payment information with Id
            paymentInfoId and returned it's Id
          content:
            application/json:
              schema: null
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No payment information found for the customer
          $ref: '#/paths/~1media/get/responses/404'
  /account/vendor:
    post:
      summary: Creates a vendor account.
      description: |
        Creates a vendor account for the user.
      security:
        - BearerAuth: []
      responses:
        '201':
          description: Vendor Account Created
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
    delete:
      summary: Deletes Vendor Account
      description: Deletes the Vendor Account
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Vendor Account Deleted
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          description: Unauthorized Access
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: Vendor Account not found
          $ref: '#/paths/~1media/get/responses/404'
  /stores:
    post:
      summary: Creates store's data
      description: |
        Creates the vendor's stores for the vendor account,
        where they can sell products. Vendors can have a 
        maximum of only 5 stores.
      security:
        - BearerAuth: []
      requestBody:
        description: |
          The store's data to be added to the vendor account.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - store_name
              properties:
                store_name:
                  type: string
                store_page:
                  type: object
                  properties:
                    heading:
                      type: string
                    navigation:
                      type: array
                      items:
                        type: string
                    hero:
                      type: object
                      properties:
                        media:
                          type: array
                          items:
                            type: string
                    body:
                      type: object
                      properties:
                        product_listings:
                          type: object
                          properties:
                            product_ids:
                              type: array
                              items:
                                type: string
              example:
                store_name: Inspire Denims
                store_page:
                  heading: Inspire Denims
                  navigation:
                    - Home
                    - New Arrivals
                    - Promos
                    - Contact
                  hero:
                    media:
                      - 'https://promo_video.mov'
                      - 'https://inspire_denim_jacket.jpg'
                      - 'https://inspire_denim1.jpg'
                      - 'https://inspire_denim2.jpg'
                  body:
                    product_listings:
                      product_ids:
                        - '1'
                        - '2'
                        - '3'
      responses:
        '201':
          description: |
            Stores added to Vendor Account.
          content:
            application/json:
              schema:
                type: object
                required:
                  - store_id
                properties:
                  store_id:
                    type: integer
                    format: int32
                description: unique identifier for a store
                example:
                  store_id: 17
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
    get:
      summary: Retrieves all the store's data
      description: |
        Retrieves all the store's data for the 
        vendor account.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: |
            Retrieved all the store's data added to a 
            Vendor's Account.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1stores~1%7BstoreId%7D/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No store's data found for the vendor
          $ref: '#/paths/~1media/get/responses/404'
  '/stores/{storeId}':
    get:
      summary: Retrieves store's data.
      description: |
        Retrieves the store's data with Id - storeId
        for the vendor.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: |
            Retrieves the store's data with Id
            storeId
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1stores/post/requestBody/content/application~1json/schema'
                  - $ref: '#/paths/~1stores/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No store's data found for the vendor
          $ref: '#/paths/~1media/get/responses/404'
    patch:
      summary: Updates the store's data.
      description: |
        Fully or Partially updates the store's data 
        with Id - storeId
        for the vendor.
      security:
        - BearerAuth: []
      requestBody:
        description: |
          The store's data to be updated to the vendor account.
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/paths/~1stores/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: |
            Replaced the store's data with a new one
            and returns its Id.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1stores/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No store's data found for the vendor
          $ref: '#/paths/~1media/get/responses/404'
    delete:
      summary: Deletes store's data.
      description: |
        Deletes the store's data with Id - storeId
        for the vendor.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: |
            Deleted the store's data with Id
            storeId and returned it's Id
          content:
            application/json:
              schema:
                $ref: '#/paths/~1stores/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No store's data found for the vendor
          $ref: '#/paths/~1media/get/responses/404'
  /products:
    post:
      summary: Adds a new product to the store
      description: |
        Adds a new product to the store with Id - productId
        for the vendor.
      security:
        - BearerAuth: []
      queries:
        storeId:
          description: |
            The storeId of the store to which the product
            is to be added.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        description: |
          The product to be added to the store.
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - category
                - description
                - list_price
                - net_price
                - quantity_available
              properties:
                title:
                  type: string
                category:
                  type: string
                description:
                  type: array
                  items:
                    type: string
                list_price:
                  type: number
                  format: float
                net_price:
                  type: number
                  format: float
                quantity_available:
                  type: integer
                  format: int32
              example:
                title: Samsung Galaxy S21 Ultra
                category: Electronics
                description:
                  - 6.8" 1440x3200 pixels
                  - 108MP 4320p
                  - 12GB RAM Exynos 2100
                list_price: 100000
                net_price: 95000
                quantity_available: 10
      responses:
        '201':
          description: |
            Added a new product to the store with Id
            productId and returned it's Id
          content:
            application/json:
              schema:
                type: object
                required:
                  - product_id
                properties:
                  product_id:
                    type: integer
                    format: int32
                description: unique identifier for a product
                example:
                  product_id: 17
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
    get:
      summary: Retrieves all the products
      description: |
        Retrieves all the products for the 
        store.
      security:
        - BearerAuth: []
      queries:
        storeId:
          description: |
            The storeId of the store whose products
            are to be retrieved.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: |
            Retrieved all the products added to a 
            store.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1products~1%7BproductId%7D/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No products found for the store
          $ref: '#/paths/~1media/get/responses/404'
  '/products/{productId}':
    get:
      summary: Retrieves product information.
      description: |
        Retrieves the product information with Id - productId
        for the vendor.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: |
            Retrieves the product information with Id
            productId
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/paths/~1products/post/requestBody/content/application~1json/schema'
                  - $ref: '#/paths/~1products/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No product found for the vendor
          $ref: '#/paths/~1media/get/responses/404'
    patch:
      summary: Updates product information.
      description: |
        Updates the product information with Id - productId
        for the vendor.
      security:
        - BearerAuth: []
      requestBody:
        description: |
          The product information to be updated.
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/paths/~1products/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: |
            Updated the product information with a new one
            and returns its Id.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1products~1%7BproductId%7D/get/responses/200/content/application~1json/schema'
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: No product found for the vendor
          $ref: '#/paths/~1media/get/responses/404'
    delete:
      summary: Deletes product information.
      description: |
        Deletes the product information with Id - productId
        for the vendor.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: |
            Deleted the product information with Id
            productId and returned it's Id
          content:
            application/json:
              schema:
                $ref: '#/paths/~1products/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No product found for the vendor
          $ref: '#/paths/~1media/get/responses/404'
  /media:
    post:
      summary: Uploads a media
      description: |
        Uploads a new media to a page or for a product.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        description: |
          The media to be uploaded.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: |
            Uploaded new media file
          content:
            application/json:
              schema:
                type: object
                required:
                  - media_name
                  - media_type
                  - media_url
                  - description
                properties:
                  media_type:
                    type: string
                  media_url:
                    type: string
                  description:
                    type: string
                example:
                  media_name: Beautiful Image
                  media_type: image
                  media_url: 'https://thrift.com/image.jpg'
                  description: A beautiful image
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
    get:
      summary: Retrieves all the media files
      description: |
        Retrieves all the media files for the 
        product.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: |
            Retrieved all the media files added to a 
            product.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1media/post/responses/201/content/application~1json/schema'
        '400':
          description: Illegal operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Not authorized to access resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: |
            No media files found for the product
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  '/media/{filename}':
    put:
      summary: Updates media file.
      description: |
        Updates the media file with the filename given in its route parameters
        for the vendor.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: |
            Updated the media file with a new one
            and returns its the filename given in its route parameters.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1media/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No media file found for the vendor
          $ref: '#/paths/~1media/get/responses/404'
    delete:
      summary: Deletes media file.
      description: |
        Deletes the media file with the filename given in its route parameters
        for the vendor.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: |
            Deleted the media file with the filename given in its route parameters
            mediaId and returned it's the filename given in its route parameters
          content:
            application/json:
              schema:
                $ref: '#/paths/~1media/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/paths/~1media/get/responses/400'
        '401':
          $ref: '#/paths/~1media/get/responses/401'
        '404':
          description: |
            No media file found for the vendor
          $ref: '#/paths/~1media/get/responses/404'
