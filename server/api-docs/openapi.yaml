#cspell:disable

openapi: 3.1.0
info:
  title: Thrift eCommerce API
  description: |
    This is the API for Thrift eCommerce Store.

    An online eCommerce platform that offers a wide range of products
    including electronics, fashion, furniture, kitchen items, media and more.
  version: 1.0.0
  contact:
    name: The Developer
    email: danielnyong66@gmail.com

servers:
  - url: https://thrift-production.up.railway.app/{basePath}
    description: Production server
    variables:
      basePath:
        default: v1

  - url: https://thrift-dev.up.railway.app/{basePath}
    description: Development server
    variables:
      basePath:
        default: v1

  - url: http://localhost:{port}/{basePath}
    description: Local server on computer
    variables:
      basePath:
        default: v1
      port:
        default: '1024'

components:
  schemas:
    UserDataSent:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        password:
          type: string
          format: password
        dob:
          type: string
          format: date
        country:
          type: string
      example:
        first_name: Joe
        last_name: Schmoe
        email: joeschmoe@fake.email.com
        phone: '+2341234567890'
        password: password
        dob: 2000-4-10
        country: Nigeria

    UserDataRetrieved:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        dob:
          type: string
          format: date
        country:
          type: string
      example:
        first_name: Joe
        last_name: Schmoe
        email: joeschmoe@fake.email.com
        phone: '+2341234567890'
        dob: 2000-4-10
        country: Nigeria

    LoginInfo:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      example:
        phone: '+2341234567890'
        password: password

    UnauthenticatedError:
      type: object
      properties:
        message:
          type: string

    BadRequestError:
      type: object
      properties:
        message:
          type: string

    NotFound:
      type: object
      properties:
        message:
          type: string

    responses:
      NotFound:
        description: Entity not found.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotFound'

      BadRequestError:
        description: Illegal operation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BadRequestError'

      UnauthenticatedError:
        description: Not authorized to access resource
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnauthenticatedError'

    parameters:
      limitParam:
        name: limit
        in: query
        description: max number of records to retrieve
        required: false,
        schema:
          type: integer
          format: int32

      offsetParam:
        name: offset
        in: query
        description: offsets records by the specified amount
        required: false,
        schema:
          type: integer
          format: int32

      sortParam:
        name: sort
        in: query
        description: >
          sorts items ascending or descending based a list of fields.
        required: false,
        schema:
          type: array
          items:
            type: string

    Token:
      type: object
      properties:
        token:
          type: string
      description: |
        unique token string used to authenticate the user
        expires within 30 minutes.
      example:
        token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMzYiLCJpYXQiOjE2ODYwMzg4MzIsImV4cCI6MTY4NjA0MDYzMn0.j8ep358FU8KRSG7ehPdFypoTua5Cr7dgBQdUks8Dkdc'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /auth/register:
    post:
      summary: Register an account
      description: Creates an account for the user and authenticates the new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDataSent'

      responses:
        '201':
          description: User Account Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'

        '400':
          description: Invalid User Schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  /auth/login:
    post:
      summary: Logs in the user.
      description: |
        Logs in the user with a token if it exists. 
        Else login the user with email or phone identification and creates token
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInfo'

      responses:
        '200':
          description: User Logged In
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'

        '400':
          description: Invalid Login Format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

        '401':
          description: Invalid Login Credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  /auth/logout:
    get:
      summary: Log In User
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User Logged In
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'

  /users:
    get:
      summary: Gets the user.
      description: Retrieves user information
      security:
        - BearerAuth: []

      responses:
        '200':
          description: User Account Retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataSent'

        '401':
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

    patch:
      summary: Update user
      description: Fully or partially updates the user's information.
      security:
        - BearerAuth: []

      responses:
        '204':
          description: Updated Successfully

        '400':
          description: Invalid Data format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

        '401':
          description: Unauthorized Access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

    delete:
      summary: Delete user
      description: Deletes the user's information.
      security:
        - BearerAuth: []

      '204':
        description: Deleted Successfully

      '401':
        description: Unauthorized Access
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BadRequestError'

      '404':
        description: User not found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotFound'

  /users/customer-account:
    post: {}
    get: {}
    patch: {}
    delete: {}
  /users/customer-account/shipping-info:
    post: {}
    get: {}
    patch: {}
    delete: {}
  /users/customer-account/payment-info:
    post: {}
    get: {}
    patch: {}
    delete: {}
  /users/vendor-account:
    post: {}
    get: {}
    patch: {}
    delete: {}
  /users/vendor-account/payment-info:
    post: {}
    get: {}
    patch: {}
    delete: {}
  /users/vendor-account/stores:
    post: {}
    get: {}
    patch: {}
    delete: {}
  /users/vendor-account/stores/products:
    post: {}
    get: {}
    patch: {}
    delete: {}
